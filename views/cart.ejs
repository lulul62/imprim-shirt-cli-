<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ImprimShirt</title>
    <link href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons' rel="stylesheet"
          type="text/css">
    <link href="https://unpkg.com/vuetify@0.15.7/dist/vuetify.min.css" rel="stylesheet" type="text/css">
    <link href="/stylesheets/style.css" rel="stylesheet" type="text/css">
    <link rel="icon" type="image/png" href="favicon-32x32.png" sizes="32x32">
    <link type="text/css" rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/6.8.0/sweetalert2.min.css">
</head>
<body>

<div id="app">

    <v-app>
        <v-navigation-drawer persistent :mini-variant="miniVariant" :clipped="clipped" v-model="drawer">
            <v-list>
                <v-list-tile v-for="(item, i) in items" :key="i" v-bind:href="item.link" value="true">
                    <v-list-tile-action>
                        <v-icon secondary v-html="item.icon"></v-icon>
                    </v-list-tile-action>
                    <v-list-tile-content>
                        <v-list-tile-title v-text="item.title"></v-list-tile-title>
                    </v-list-tile-content>
                </v-list-tile>
            </v-list>
        </v-navigation-drawer>
        <v-toolbar>
            <v-toolbar-side-icon @click.native.stop="drawer = !drawer"></v-toolbar-side-icon>
            <v-toolbar-title>Panier</v-toolbar-title>
            <v-spacer></v-spacer>
            <v-toolbar-title>Imprim-shirt</v-toolbar-title>

        </v-toolbar>
        <main>
            <v-container fluid style="    position: relative;
    top: 2em;">
                <v-container fluid>
                    <v-slide-y-transition mode="out-in">
                        <template>
                            <div>
                                <v-stepper v-model="e1">
                                    <v-stepper-header>
                                        <v-stepper-step step="1" :complete="e1 > 1">Validation du panier
                                        </v-stepper-step>
                                        <v-divider></v-divider>
                                        <v-stepper-step step="2" :complete="e1 > 2">Vérification des informations de
                                            livraison
                                        </v-stepper-step>
                                        <v-divider></v-divider>
                                        <v-stepper-step step="3">Paiement</v-stepper-step>
                                    </v-stepper-header>
                                    <v-stepper-content step="1">
                                        <template>
                                            <v-flex xs12 sm12 offset-sm0>
                                                <v-card>
                                                    <v-toolbar class="secondary white--text" dark>
                                                        <v-toolbar-side-icon>
                                                            <v-icon>shopping_cart</v-icon>
                                                        </v-toolbar-side-icon>
                                                        <v-toolbar-title>Nombre de produits : {{numberOfItem}}
                                                        </v-toolbar-title>
                                                        <v-spacer></v-spacer>
                                                        <v-toolbar-title>Prix total (livraison incluse) : {{totalPriceWithDelivery}} €
                                                        </v-toolbar-title>
                                                    </v-toolbar>
                                                    <v-list>
                                                        <v-list-group v-for="item in cart" :value="item.gamme"
                                                                      v-bind:key="item.gamme">
                                                            <v-list-tile slot="item">
                                                                <v-list-tile-action>
                                                                    <v-icon>loyalty</v-icon>
                                                                </v-list-tile-action>
                                                                <v-list-tile-content>
                                                                    <v-list-tile-title>{{ item.gamme }} x
                                                                        {{item.quantity}}
                                                                    </v-list-tile-title>
                                                                </v-list-tile-content>
                                                                <v-list-tile-action>
                                                                    <v-icon>keyboard_arrow_down</v-icon>
                                                                </v-list-tile-action>
                                                            </v-list-tile>
                                                            <template>
                                                                <v-carousel :cycle="false" light hide-controls>
                                                                    <v-carousel-item v-for="visual in item.visual"
                                                                                     style="width: 325px"
                                                                                     v-bind:style='{"background-color" : item.color}'
                                                                                     v-bind:src="visual.img"><img
                                                                                id="canvas" style="{
    border: none;
    position: relative;
    bottom: 80px;
    left: 5px;
}" v-bind:src="visual.computedCanvas" style="width : 135px; height:250px"></v-carousel-item>
                                                                </v-carousel>
                                                            </template>


                                                            <v-list-tile>
                                                                <v-list-tile-content>
                                                                    <v-list-tile-title> Sexe : {{ item.gender }}
                                                                    </v-list-tile-title>


                                                                </v-list-tile-content>
                                                            </v-list-tile>
                                                            <v-list-tile>
                                                                <v-list-tile-content>
                                                                    <v-list-tile-title> Taille : {{ item.size }}
                                                                    </v-list-tile-title>

                                                                </v-list-tile-content>
                                                            </v-list-tile>
                                                            <v-list-tile>
                                                                <v-list-tile-content>
                                                                    <v-list-tile-title> Prix : {{ item.price }} €
                                                                    </v-list-tile-title>

                                                                </v-list-tile-content>
                                                            </v-list-tile>

                                                        </v-list-group>
                                                    </v-list>
                                                </v-card>
                                            </v-flex>
                                        </template>
                                        <div>
                                            <v-btn primary @click.native="acceptCart()">
                                                <v-icon light>check_circle</v-icon>
                                                valider mon panier
                                            </v-btn>
                                            <v-btn warning @click.native="destroyCart()">
                                                <v-icon light>delete_forever</v-icon>
                                                Vider mon panier
                                            </v-btn>
                                        </div>
                                    </v-stepper-content>
                                    <v-stepper-content step="2">
                                        <v-card>
                                            <template>
                                                <v-form>
                                                    <v-text-field
                                                            label="Adresse email"
                                                            v-model="currentUser.email"
                                                            required
                                                    ></v-text-field>
                                                    <v-text-field
                                                            label="Nom"
                                                            v-model="currentUser.name"
                                                            required
                                                    ></v-text-field>
                                                    <v-text-field
                                                            label="Prénom"
                                                            v-model="currentUser.firstname"
                                                            required
                                                    ></v-text-field>
                                                    <v-text-field
                                                            label="Numéro de téléphone"
                                                            v-model="currentUser.telephone"
                                                            required
                                                    ></v-text-field>
                                                    <v-text-field
                                                            label="Pays"
                                                            v-model="currentUser.country"
                                                            required
                                                    ></v-text-field>
                                                    <v-text-field
                                                            label="Code postal"
                                                            v-model="currentUser.postalCode"
                                                            required
                                                    ></v-text-field>
                                                    <v-text-field
                                                            label="Ville"
                                                            v-model="currentUser.city"
                                                            required
                                                    ></v-text-field>
                                                    <v-text-field
                                                            label="Adresse de livraison"
                                                            v-model="currentUser.address"
                                                            required
                                                    ></v-text-field>
                                                </v-form>
                                            </template>
                                        </v-card>
                                        <v-btn primary @click.native="goToPayment()">
                                            <v-icon light>check_circle</v-icon>
                                            Valider
                                        </v-btn>
                                        <v-btn warning @click.native="cancel()">
                                            <v-icon light>skip_previous</v-icon>
                                            Retour au panier
                                        </v-btn>
                                    </v-stepper-content>
                                    <v-stepper-content step="3">
                                        <v-btn primary @click.native="convertCartToOrder()">
                                            <v-icon light>check_circle</v-icon>
                                            Accéder au paiement
                                        </v-btn>
                                        <v-btn warning @click.native="cancel()">
                                            <v-icon light>skip_previous</v-icon>
                                            Informations de livraison
                                        </v-btn>
                                    </v-stepper-content>
                                </v-stepper>
                            </div>
                        </template>
                    </v-slide-y-transition>
                </v-container>
            </v-container>

        </main>
        <template>
            <v-footer class="pa-3">
                <v-spacer></v-spacer>
                <div>© ImprimShirt {{ new Date().getFullYear() }}</div>
            </v-footer>
        </template>
    </v-app>
</div>


<script src="https://unpkg.com/vue/dist/vue.js"></script>
<script src="https://unpkg.com/vuetify@0.15.7/dist/vuetify.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue-resource/1.3.4/vue-resource.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"></script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/6.8.0/sweetalert2.min.js"></script>

<script>
    var isConnected = sessionStorage.getItem("dataKey");
    if (isConnected === "" || isConnected === null) {
        window.location.href = "/";
    }
    else {
        Vue.component('page', {
            template: '#page'
        })


        var vm = new Vue({
            el: '#app',
            data: {
                clipped: false,
                drawer: true,
                fixed: false,
                baseUrlCurrentUser: "https://transfertprod-668c2.firebaseio.com/user/",
                items: [
                    {icon: "note_add", title: "Personnaliser un produit", link: "/product"},
                    {icon: "shopping_cart", title: "Panier", link: "/cart"},
                    {icon: 'account_circle', title: 'Gestion du profil', link: "/gestionProfil"},
                    {icon: 'shopping_basket', title: 'Suivi des commandes', link: '/orders'}
                ],
                item: [],
                currentUser: {},
                y: 'bottom',
                x: null,
                mode: '',
                e1: 1,
                cartTitle: "",
                dialog: false,
                timeout: 4000,
                paymentIsValidated: true,
                errorArray: [],
                successUpdate: false,
                errorForm: "",
                totalPriceWithDelivery: '',
                cart: [],
                numberOfItem: 0,
                showErrorForm: false,
                miniVariant: false,
                right: true,
                title: 'ImprimShirt'
            },
            methods: {
                /**
                 * Inititalisation du panier avec les item présents en sessions.
                 * @returns {string}
                 */
                checkEmptyCart() {
                    if (localStorage.getItem('cart') !== null) {
                        vm.cart = JSON.parse(localStorage.getItem('cart'));
                        let sumOfProduct = [];
                        var canvas = document.getElementById('canvas');
                        let totalWeight = 0;
                        let totalPrice = 0;
                        vm.cart.forEach((item) => {
                            sumOfProduct.push(parseInt(item.quantity));
                            item.price = parseFloat(item.price).toFixed(2);
                            totalWeight = totalWeight + parseFloat(item.weight)
                            totalPrice = totalPrice + parseFloat(item.price)
                        })
                        const deliveryPrice = estimateDeliveryPrice(totalWeight.toFixed(2));
                        this.totalPriceWithDelivery = deliveryPrice + totalPrice
                        this.totalPriceWithDelivery = this.totalPriceWithDelivery.toFixed(2)
                        vm.numberOfItem = _.sum(sumOfProduct);


                    }
                    else {
                        return vm.cartTitle = "Votre panier est vide :("
                    }
                },

                /**
                 * Vide le panier en cours pour l"utilisateur
                 */
                destroyCart() {
                    if (vm.cart === undefined || vm.cart.length === 0) {
                        return swal('', 'Votre panier est vide', 'error');
                    }
                    swal({
                        title: 'Etes-vous sûr de vouloir vider votre panier?',
                        text: "Vous perdrez l'ensemble des produits ajoutés",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Confirmer',
                        cancelButtonText: 'Annuler'
                    }).then(function () {
                        vm.cart = [];
                        vm.numberOfItem = 0;
                        localStorage.removeItem('cart');
                        swal(
                            '',
                            'Votre panier à été vidé !',
                            'success'
                        )
                    })
                },

                /**
                 * Passe à l'étape de validation des informations de l'utilisateur
                 * @returns {*}
                 */
                acceptCart() {
                    if (vm.cart === undefined || vm.cart.length === 0) {
                        return swal('', 'Votre panier est vide', 'error');
                    }
                    vm.getCurrentUser();
                    vm.e1 = 2;
                    console.log(this.cart)

                },

                /**
                 * Ajuste la vue de l'utilisateur sur le visuel suivant
                 */
                showOtherSideOfProduct: function () {
                    vm.selectedItem.visuel[vm.visualIndex].canvas = JSON.stringify(canvas);
                    canvas.clear();
                    if (vm.visualIndex > vm.indexOfImg) {
                        vm.visualIndex = 0;
                    }
                    else {
                        vm.visualIndex = vm.visualIndex + 1;
                    }
                    $("#tshirtFacing").attr("src", vm.selectedItem.visuel[vm.visualIndex].img);
                    console.log(vm.selectedItem);
                    try {
                        var json = JSON.parse(vm.selectedItem.visuel[vm.visualIndex].canvas);
                        canvas.loadFromJSON(vm.selectedItem.visuel[vm.visualIndex].canvas);
                    }
                    catch (e) {
                    }
                    canvas.renderAll();
                    setTimeout(function () {
                        canvas.calcOffset();
                    }, 200);
                },

                /**
                 * Récupere les informations de l'utilisateur connecté
                 * @returns {Promise.<TResult>}
                 */
                getCurrentUser() {
                    return this.$http.get(this.baseUrlCurrentUser + isConnected + ".json").then((currentUser) => {
                        this.currentUser = currentUser.data;
                        console.log(this.currentUser);
                    });
                },

                /**
                 * Check des informations du formulaire
                 */
                checkForm() {
                    this.errorArray = [];
                    let user = this.currentUser;
                    if (user.name === "") {
                        this.errorArray.push("Nom");
                    }
                    if (user.email === "") {
                        this.errorArray.push('Email');
                    }
                    if (user.firstname === "") {
                        this.errorArray.push("Prénom");
                    }
                    if (user.country === "") {
                        this.errorArray.push("Pays");
                    }
                    if (user.city === "") {
                        this.errorArray.push("Ville");
                    }
                    if (user.postalCode === "") {
                        this.errorArray.push('Code postal');
                    }
                    if (user.phone === "") {
                        this.errorArray.push('telephone');
                    }
                    if (user.address === "") {
                        this.errorArray.push("Addresse");
                    }
                    if (user.birthdate === "") {
                        this.errorArray.push("Date de naissance");
                    }
                },

                /**
                 * Passe à l'étape de paiment
                 * @returns {Promise.<TResult>}
                 */
                goToPayment() {
                    this.checkForm();
                    if (this.errorArray.length > 0) {
                        return swal('Erreur', 'Des informations sont manquantes : ' + this.errorArray.toString(), 'error');
                    }
                    vm.e1 = 3;
                },

                /**
                 * Retourne à l'étape précedente.
                 * @returns {number}
                 */
                cancel() {
                    if (vm.e1 = 2) {
                        return vm.e1 = 1;
                    }
                    if (vm.e1 = 3) {
                        return vm.e1 = 2;
                    }
                },

                /**
                 * Callback de retour de systemPay et convertit le panier de l'utilisateur en commande.
                 */
                convertCartToOrder() {
                    if (this.paymentIsValidated !== true) {
                        return swal('Erreur', 'Le paiement de votre commande à échoué', 'error');

                    }
                    delete this.currentUser.password;
                    delete this.currentUser.birthdate;
                    let currentUser = {
                        address: this.currentUser.address,
                        city: this.currentUser.city,
                        country: this.currentUser.country,
                        email: this.currentUser.email,
                        userkey: this.currentUser.userkey,
                        firstname: this.currentUser.firstname,
                        name: this.currentUser.name,
                        postalCode: this.currentUser.postalCode
                    }
                    let order = {
                        reference: this.guid(),
                        customerInformation: currentUser,
                        content: vm.cart,
                        totalPriceWithDelivery: this.totalPriceWithDelivery,
                        order_date: new Date(),
                        state: "En cours de préparation"
                    }
                    this.$http.post('https://transfertprod-668c2.firebaseio.com/user/' + isConnected + '/orders.json', order).then(function (resp) {
                        order.key = resp.body.name;
                        this.$http.patch('https://transfertprod-668c2.firebaseio.com/user/' + isConnected + '/orders/' + order.key + '.json', order).then(res => {
                            let email = {
                                orderRef: order.reference,
                                clientEmail: order.customerInformation.email,
                                type: 'order'
                            }
                            this.$http.post('http://imprimshirtcli.herokuapp.com/mail', email).then(success => {
                                swal({
                                    title: 'Validation du paiement de votre commande',
                                    text: "Votre commande est désormais en cours de préparation.\n" +
                                    "Vous pouvez dès à présent consulter son état dans la section de suivi des commandes.\n" +
                                    "Un email de confirmation vous a été envoyé sur votre adresse mail.",
                                    type: 'success',
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Consulter mon suivi de commande'
                                }).then(function () {
                                    order = {};
                                    localStorage.removeItem('cart');
                                    this.currentCart = [];
                                    window.location.href = '/orders'
                                });
                            })
                        })
                    })
                },

                guid() {
                    function s4() {
                        return Math.floor((1 + Math.random()) * 0x10000)
                            .toString(16)
                            .substring(1);
                    }

                    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                        s4() + '-' + s4() + s4() + s4();
                }
            }
        });

    }
    vm.checkEmptyCart();

    /**
     * Estimate delivery cost for an order
     * @param weight
     * @returns {number|*}
     */
    function estimateDeliveryPrice(weight) {
        let deliveryPrice = 0;
        const price = [4.72, 5.41, 6.10, 6.83, 7.41, 8.21, 9.01, 9.83, 10.63, 11.45, 12.25, 13.05, 13.87, 14.67, 15.49,
            16.29, 17.10, 17.91, 18.71, 19.53, 20.33, 21.14, 21.95, 22.75, 23.57, 24.37, 25.18, 25.99, 26.79, 27.61, 28.41,
            29.22, 30.03, 30.83];
        const deliveryWeight = [0.25, 0.50, 0.75, 1.00, 2.00, 3.00, 4.00, 5.00, 6.00, 7.00, 8.00, 9.00, 10.00, 11.00, 12.00,
            13.00, 14.00, 15.00, 16.00, 17.00, 18.00,
            19.00, 20.00, 21.00, 22.00, 23.00, 24.00, 25.00, 26.00, 27.00, 28.00, 29.00, 30.00];


        if (weight < deliveryWeight[0]) {
            return deliveryPrice = price[0];
        }
        if (weight >= deliveryWeight[0] && weight <= deliveryWeight[1]) {
            return deliveryPrice = price[1];
        }
        if (weight >= deliveryWeight[1] && weight <= deliveryWeight[2]) {
            return deliveryPrice = price[2];
        }
        if (weight >= deliveryWeight[2] && weight <= deliveryWeight[3]) {
            return deliveryPrice = price[3];
        }
        if (weight >= deliveryWeight[3] && weight <= deliveryWeight[4]) {
            return deliveryPrice = price[4];
        }
        if (weight >= deliveryWeight[4] && weight <= deliveryWeight[5]) {
            return deliveryPrice = price[5];
        }
        if (weight >= deliveryWeight[5] && weight <= deliveryWeight[6]) {
            return deliveryPrice = price[6];
        }
        if (weight >= deliveryWeight[6] && weight <= deliveryWeight[7]) {
            return deliveryPrice = price[7];
        }
        if (weight >= deliveryWeight[7] && weight <= deliveryWeight[8]) {
            return deliveryPrice = price[8];
        }
        if (weight >= deliveryWeight[8] && weight <= deliveryWeight[9]) {
            return deliveryPrice = price[9];
        }
        if (weight >= deliveryWeight[9] && weight <= deliveryWeight[10]) {
            return deliveryPrice = price[10];
        }
        if (weight >= deliveryWeight[10] && weight <= deliveryWeight[11]) {
            return deliveryPrice = price[11];
        }
        if (weight >= deliveryWeight[11] && weight <= deliveryWeight[12]) {
            return deliveryPrice = price[12];
        }
        if (weight >= deliveryWeight[12] && weight <= deliveryWeight[13]) {
            return deliveryPrice = price[13];
        }
        if (weight >= deliveryWeight[13] && weight <= deliveryWeight[14]) {
            return deliveryPrice = price[14];
        }
        if (weight >= deliveryWeight[14] && weight <= deliveryWeight[15]) {
            return deliveryPrice = price[15];
        }
        if (weight >= deliveryWeight[15] && weight <= deliveryWeight[16]) {
            return deliveryPrice = price[16];
        }
        if (weight >= deliveryWeight[16] && weight <= deliveryWeight[17]) {
            return deliveryPrice = price[17];
        }
        if (weight >= deliveryWeight[17] && weight <= deliveryWeight[18]) {
            return deliveryPrice = price[18];
        }
        if (weight >= deliveryWeight[18] && weight <= deliveryWeight[19]) {
            return deliveryPrice = price[19];
        }
        if (weight >= deliveryWeight[19] && weight <= deliveryWeight[20]) {
            return deliveryPrice = price[20];
        }
        if (weight >= deliveryWeight[20] && weight <= deliveryWeight[21]) {
            return deliveryPrice = price[21];
        }
        if (weight >= deliveryWeight[21] && weight <= deliveryWeight[22]) {
            return deliveryPrice = price[22];
        }
        if (weight >= deliveryWeight[22] && weight <= deliveryWeight[23]) {
            return deliveryPrice = price[23];
        }
        if (weight >= deliveryWeight[23] && weight <= deliveryWeight[24]) {
            return deliveryPrice = price[24];
        }
        if (weight >= deliveryWeight[24] && weight <= deliveryWeight[25]) {
            return deliveryPrice = price[25];
        }
        if (weight >= deliveryWeight[25] && weight <= deliveryWeight[26]) {
            return deliveryPrice = price[26];
        }
        if (weight >= deliveryWeight[26] && weight <= deliveryWeight[27]) {
            return deliveryPrice = price[27];
        }
        if (weight >= deliveryWeight[27] && weight <= deliveryWeight[28]) {
            return deliveryPrice = price[28];
        }
        if (weight >= deliveryWeight[28] && weight <= deliveryWeight[29]) {
            return deliveryPrice = price[29];
        }
        if (weight >= deliveryWeight[29] && weight <= deliveryWeight[30]) {
            return deliveryPrice = price[30];
        }
        if (weight >= deliveryWeight[30] && weight <= deliveryWeight[31]) {
            return deliveryPrice = price[31];
        }
        if (weight >= deliveryWeight[31] && weight <= deliveryWeight[32]) {
            return deliveryPrice = price[32];
        }
        if (weight > deliveryWeight[32]) {
            deliveryPrice = price[32];
        }
    }
</script>

</body>

</html>
